{"version":3,"file":"markdownItDefList.mjs","sources":["../index.js"],"sourcesContent":["// Process definition lists\n//\n\nmodule.exports = function deflist_plugin(md) {\n  let isSpace = md.utils.isSpace;\n\n  // Search `[:~][\\n ]`, returns next pos after marker on success\n  // or -1 on fail.\n  function skipMarker(state, line) {\n    let pos, marker,\n        start = state.bMarks[line] + state.tShift[line],\n        max = state.eMarks[line];\n\n    if (start >= max) { return -1; }\n\n    // Check bullet\n    marker = state.src.charCodeAt(start++);\n    if (marker !== 0x7E/* ~ */ && marker !== 0x3A/* : */) { return -1; }\n\n    pos = state.skipSpaces(start);\n\n    // require space after \":\"\n    if (start === pos) { return -1; }\n\n    // no empty definitions, e.g. \"  : \"\n    if (pos >= max) { return -1; }\n\n    return start;\n  }\n\n  function markTightParagraphs(state, idx) {\n    let i, l,\n        level = state.level + 2;\n\n    for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n      if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n        state.tokens[i + 2].hidden = true;\n        state.tokens[i].hidden = true;\n        i += 2;\n      }\n    }\n  }\n\n  function deflist(state, startLine, endLine, silent) {\n    let ch,\n        contentStart,\n        ddLine,\n        dtLine,\n        itemLines,\n        listLines,\n        listTokIdx,\n        max,\n        nextLine,\n        offset,\n        oldDDIndent,\n        oldIndent,\n        oldParentType,\n        oldSCount,\n        oldTShift,\n        oldTight,\n        pos,\n        prevEmptyEnd,\n        tight,\n        token;\n\n    if (silent) {\n      // quirk: validation mode validates a dd block only, not a whole deflist\n      if (state.ddIndent < 0) { return false; }\n      return skipMarker(state, startLine) >= 0;\n    }\n\n    nextLine = startLine + 1;\n    if (nextLine >= endLine) { return false; }\n\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      if (nextLine >= endLine) { return false; }\n    }\n\n    if (state.sCount[nextLine] < state.blkIndent) { return false; }\n    contentStart = skipMarker(state, nextLine);\n    if (contentStart < 0) { return false; }\n\n    // Start list\n    listTokIdx = state.tokens.length;\n    tight = true;\n\n    token     = state.push('dl_open', 'dl', 1);\n    token.map = listLines = [ startLine, 0 ];\n\n    //\n    // Iterate list items\n    //\n\n    dtLine = startLine;\n    ddLine = nextLine;\n\n    // One definition list can contain multiple DTs,\n    // and one DT can be followed by multiple DDs.\n    //\n    // Thus, there is two loops here, and label is\n    // needed to break out of the second one\n    //\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    for (;;) {\n      prevEmptyEnd = false;\n\n      token          = state.push('dt_open', 'dt', 1);\n      token.map      = [ dtLine, dtLine ];\n\n      token          = state.push('inline', '', 0);\n      token.map      = [ dtLine, dtLine ];\n      token.content  = state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim();\n      token.children = [];\n\n      token          = state.push('dt_close', 'dt', -1);\n\n      for (;;) {\n        token     = state.push('dd_open', 'dd', 1);\n        token.map = itemLines = [ nextLine, 0 ];\n\n        pos = contentStart;\n        max = state.eMarks[ddLine];\n        offset = state.sCount[ddLine] + contentStart - (state.bMarks[ddLine] + state.tShift[ddLine]);\n\n        while (pos < max) {\n          ch = state.src.charCodeAt(pos);\n\n          if (isSpace(ch)) {\n            if (ch === 0x09) {\n              offset += 4 - offset % 4;\n            } else {\n              offset++;\n            }\n          } else {\n            break;\n          }\n\n          pos++;\n        }\n\n        contentStart = pos;\n\n        oldTight = state.tight;\n        oldDDIndent = state.ddIndent;\n        oldIndent = state.blkIndent;\n        oldTShift = state.tShift[ddLine];\n        oldSCount = state.sCount[ddLine];\n        oldParentType = state.parentType;\n        state.blkIndent = state.ddIndent = state.sCount[ddLine] + 2;\n        state.tShift[ddLine] = contentStart - state.bMarks[ddLine];\n        state.sCount[ddLine] = offset;\n        state.tight = true;\n        state.parentType = 'deflist';\n\n        state.md.block.tokenize(state, ddLine, endLine, true);\n\n        // If any of list item is tight, mark list as tight\n        if (!state.tight || prevEmptyEnd) {\n          tight = false;\n        }\n        // Item become loose if finish with empty line,\n        // but we should filter last element, because it means list finish\n        prevEmptyEnd = (state.line - ddLine) > 1 && state.isEmpty(state.line - 1);\n\n        state.tShift[ddLine] = oldTShift;\n        state.sCount[ddLine] = oldSCount;\n        state.tight = oldTight;\n        state.parentType = oldParentType;\n        state.blkIndent = oldIndent;\n        state.ddIndent = oldDDIndent;\n\n        token = state.push('dd_close', 'dd', -1);\n\n        itemLines[1] = nextLine = state.line;\n\n        if (nextLine >= endLine) { break OUTER; }\n\n        if (state.sCount[nextLine] < state.blkIndent) { break OUTER; }\n        contentStart = skipMarker(state, nextLine);\n        if (contentStart < 0) { break; }\n\n        ddLine = nextLine;\n\n        // go to the next loop iteration:\n        // insert DD tag and repeat checking\n      }\n\n      if (nextLine >= endLine) { break; }\n      dtLine = nextLine;\n\n      if (state.isEmpty(dtLine)) { break; }\n      if (state.sCount[dtLine] < state.blkIndent) { break; }\n\n      ddLine = dtLine + 1;\n      if (ddLine >= endLine) { break; }\n      if (state.isEmpty(ddLine)) { ddLine++; }\n      if (ddLine >= endLine) { break; }\n\n      if (state.sCount[ddLine] < state.blkIndent) { break; }\n      contentStart = skipMarker(state, ddLine);\n      if (contentStart < 0) { break; }\n\n      // go to the next loop iteration:\n      // insert DT and DD tags and repeat checking\n    }\n\n    // Finilize list\n    token = state.push('dl_close', 'dl', -1);\n\n    listLines[1] = nextLine;\n\n    state.line = nextLine;\n\n    // mark paragraphs tight if needed\n    if (tight) {\n      markTightParagraphs(state, listTokIdx);\n    }\n\n    return true;\n  }\n\n\n  md.block.ruler.before('paragraph', 'deflist', deflist, { alt: [ 'paragraph', 'reference' ] });\n};\n"],"names":["module","exports","deflist_plugin","md","isSpace","utils","skipMarker","state","line","pos","marker","start","bMarks","tShift","max","eMarks","src","charCodeAt","skipSpaces","markTightParagraphs","idx","i","l","level","tokens","length","type","hidden","deflist","startLine","endLine","silent","ch","contentStart","ddLine","dtLine","itemLines","listLines","listTokIdx","nextLine","offset","oldDDIndent","oldIndent","oldParentType","oldSCount","oldTShift","oldTight","prevEmptyEnd","tight","token","ddIndent","isEmpty","sCount","blkIndent","push","map","OUTER","content","getLines","trim","children","parentType","block","tokenize","ruler","before","alt"],"mappings":"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"}